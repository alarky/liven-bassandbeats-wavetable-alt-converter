const logTablePositive = [0, .029510598, .057142886, .083121729, .107633878, .130836133, .152861418, .173823398, .193820026, .212936316, .231246524, .248815888, .265702033, .281956115, .297623747, .312745779, .327358934, .34149635, .355188028, .368461219, .381340747, .393849293, .40600763, .417834837, .429348473, .440564736, .451498601, .46216394, .472573627, .482739632, .492673102, .50238444, .511883361, .52117896, .53027976, .539193757, .547928465, .556490956, .564887888, .573125544, .581209852, .589146419, .596940547, .604597259, .612121317, .619517239, .626789317, .633941629, .640978057, .647902297, .654717869, .661428132, .66803629, .674545405, .680958401, .687278077, .693507109, .69964806, .705703387, .711675445, .717566493, .723378699, .729114146, .734774835, .740362689, .74587956, .751327228, .756707407, .76202175, .767271848, .772459236, .777585394, .782651752, .787659687, .792610533, .797505576, .80234606, .807133187, .811868123, .816551991, .821185883, .825770852, .830307922, .834798083, .839242295, .843641489, .847996568, .852308407, .856577858, .860805744, .864992869, .869140009, .873247923, .877317344, .881348987, .885343548, .889301703, .893224108, .897111404, .900964214, .904783145, .908568787, .912321715, .91604249, .919731658, .923389752, .927017291, .930614781, .934182716, .937721577, .941231834, .944713946, .948168362, .951595517, .954995839, .958369745, .961717642, .965039928, .968336992, .971609213, .974856965, .978080609, .981280501, .984456988, .987610411, .990741101, .993849385, 1];
const logInvTablePositive = [0, .002016858, .004070325, .006161067, .008289759, .01045709, .012663762, .014910489, .017197998, .01952703, .021898337, .024312687, .026770862, .029273658, .031821883, .034416363, .037057937, .03974746, .042485803, .045273851, .048112508, .051002691, .053945335, .056941394, .059991836, .063097649, .066259838, .069479426, .072757456, .076094987, .0794931, .082952894, .08647549, .090062027, .093713666, .097431588, .101216997, .105071118, .108995198, .112990506, .117058336, .121200005, .125416851, .129710241, .134081563, .138532232, .143063689, .147677399, .152374856, .15715758, .162027119, .166985048, .172032972, .177172525, .182405369, .187733198, .193157737, .198680741, .204303996, .210029323, .215858575, .221793638, .227836432, .233988914, .240253073, .246630938, .253124572, .259736077, .266467592, .273321296, .280299406, .28740418, .294637919, .302002963, .309501694, .317136541, .324909973, .332824507, .340882702, .349087168, .357440559, .365945579, .374604979, .383421562, .392398182, .401537743, .410843202, .420317571, .429963917, .43978536, .44978508, .459966311, .47033235, .48088655, .491632326, .502573157, .513712584, .525054209, .536601705, .548358808, .560329322, .572517122, .584926152, .597560427, .610424035, .62352114, .63685598, .650432871, .664256205, .678330457, .692660181, .707250014, .722104677, .737228978, .752627811, .76830616, .784269098, .80052179, .817069497, .833917573, .85107147, .868536741, .886319036, .904424111, .922857823, .94162614, .960735133, 1];
const getTableIndex = function(e) {
    let a = Math.fround(e / 32768);
    a = Math.abs(a)
    return parseInt(127 * a + .5, 10)
};
const getInvTableIndex = function(e) {
    return Math.abs(e)
};
const encodeValue = function(e) {
    var tableValue = logTablePositive[getTableIndex(e)];
    return parseInt(Math.fround(127 * tableValue * (e < 0 ? -1 : 1)), 10)
};
const decodeValue = function(e) {
    var tableValue = logInvTablePositive[getInvTableIndex(e)];
    return parseInt(Math.fround(32767 * tableValue * (e < 0 ? -1 : 1)), 10)
};

export var logCompressBuffer = function(e, a, t) {
    for (let n = 0; n < t; n++) {
        l = a[n];
        var tableValue = logTablePositive[getTableIndex(l)];
        e[n] = parseInt(Math.fround(127 * tableValue * (l < 0 ? -1 : 1)), 10);
    }
    var l;
};

export var logDecompressBuffer = function(e, a, t) {
    for (let n = 0; n < t; n++) {
        l = a[n];
        var tableValue = logInvTablePositive[getInvTableIndex(l)];
        e[n] = parseInt(Math.fround(32767 * tableValue * (l < 0 ? -1 : 1)), 10);
    }
    var l;
};
